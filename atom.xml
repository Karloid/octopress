<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[blog.kalcho.ru]]></title>
  <link href="http://ryabko.github.io/octopress/atom.xml" rel="self"/>
  <link href="http://ryabko.github.io/octopress/"/>
  <updated>2013-04-19T01:37:11+04:00</updated>
  <id>http://ryabko.github.io/octopress/</id>
  <author>
    <name><![CDATA[Ryabko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Москва, август 2012]]></title>
    <link href="http://ryabko.github.io/octopress/blog/2012/08/30/moskva-avgust-2012/"/>
    <updated>2012-08-30T00:35:00+04:00</updated>
    <id>http://ryabko.github.io/octopress/blog/2012/08/30/moskva-avgust-2012</id>
    <content type="html"><![CDATA[<p>Московские коридоры, стадион «Локомотив», водные прогулки, Арбат, место сходки китайгородских геев —
все это на фотках с традиционной ежегодной осенней поездки в Москву, которая, правда, на этот раз прошла в августе.</p>

<!-- more -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Самолетики над городом]]></title>
    <link href="http://ryabko.github.io/octopress/blog/2011/09/08/samolietiki-nad-ghorodom/"/>
    <updated>2011-09-08T00:34:00+04:00</updated>
    <id>http://ryabko.github.io/octopress/blog/2011/09/08/samolietiki-nad-ghorodom</id>
    <content type="html"><![CDATA[<p>В пятницу днем, находясь на работе, сквозь наушники услышал мощный шум, похожий на раскаты хорошего грома.
Повернул голову к окну – вроде ясная погода – продолжил работу.</p>

<p>Спустя какое-то время выхожу на обед – у крыльца выстроились коллеги, которые, оказывается,
смотрят на пролетающие по улице самолеты. Они-то мне и рассказали, что самолеты прилетели из Липецка
и что они репетируют перед субботним выступлением в честь Дня города в Воронеже.
Ума не приложу, откуда они все знают, но все действительно так и оказалось.</p>

<!-- more -->


<p>Я бы, наверное, специально никуда не пошел, но в субботу опять был на работе, и грех было не выйти посмотреть. Увиденным доволен. У нас все-таки тоже бывает что-то интересненькое, пусть и раз в 425 лет (старожилы утверждают, что авиашоу в Воронеже бывало и раньше).</p>

<p>Приехавшие посмотреть на это автолюбители заполонили машинами все тротуары на центральных улицах. По улице Орджоникидзе, например, в это время вообще нереально было проехать.<br/>
<a href="http://blog.kalcho.ru/wp-content/uploads/2011/09/ordz-autos.jpg">[Автомобили на ул. Орджоникидзе](http://blog.kalcho.ru/wp-content/uploads/2011/09/ordz-autos-640x480.jpg &#8220;Автомобили на ул. Орджоникидзе&#8221;)</a></p>

<p>На газоне у драмтеатра толпа народу.<br/>
<a href="http://blog.kalcho.ru/wp-content/uploads/2011/09/dram-park.jpg"><img class="alignnone size-medium wp-image-68" title="Люди у драмтеатра" src="http://blog.kalcho.ru/wp-content/uploads/2011/09/dram-park-640x480.jpg" alt="Люди у драмтеатра" width="640" height="480" /></a></p>

<p>Но мы-то знаем, что это не самое лучшее место. Идем дальше к Дому Детей и Юношества, обходим его с левой стороны и попадаем на площадку, с которой отлично просматривается водохранилище (и, кстати, видно все три моста). Оказывается, не мы одни знаем это место, и народу тут полно. Но это не проблема: площадка большая, и место найдется всем.<br/>
<a href="http://blog.kalcho.ru/wp-content/uploads/2011/09/ddu-place.jpg"><img class="alignnone size-medium wp-image-69" title="Площадка у ДДЮ" src="http://blog.kalcho.ru/wp-content/uploads/2011/09/ddu-place-640x480.jpg" alt="Площадка у ДДЮ" width="640" height="480" /></a></p>

<p>С Чернавского моста, наверное, тоже неплохо было видно. Многие смотрели оттуда.<br/>
<a href="http://blog.kalcho.ru/wp-content/uploads/2011/09/chern-autos.jpg"><img class="alignnone size-medium wp-image-70" title="Чернавский мост" src="http://blog.kalcho.ru/wp-content/uploads/2011/09/chern-autos-640x480.jpg" alt="Чернавский мост" width="640" height="480" /></a></p>

<p>А теперь самолетики.<br/>
<a href="http://blog.kalcho.ru/wp-content/uploads/2011/09/air01.jpg"><img class="alignnone size-medium wp-image-74" title="Самолетики" src="http://blog.kalcho.ru/wp-content/uploads/2011/09/air01-640x480.jpg" alt="Самолетики" width="640" height="480" /></a></p>

<p><a href="http://blog.kalcho.ru/wp-content/uploads/2011/09/air02.jpg"><img class="alignnone size-medium wp-image-79" title="Самолетики" src="http://blog.kalcho.ru/wp-content/uploads/2011/09/air02-640x480.jpg" alt="Самолетики" width="640" height="480" /></a></p>

<p><a href="http://blog.kalcho.ru/wp-content/uploads/2011/09/air03.jpg"><img class="alignnone size-medium wp-image-80" title="Самолетики" src="http://blog.kalcho.ru/wp-content/uploads/2011/09/air03-640x480.jpg" alt="Самолетики" width="640" height="480" /></a></p>

<p>И облака были красивые. Как в Спрингфилде.<br/>
<a href="http://blog.kalcho.ru/wp-content/uploads/2011/09/clouds.jpg"><img class="alignnone size-medium wp-image-81" title="Облака" src="http://blog.kalcho.ru/wp-content/uploads/2011/09/clouds-640x480.jpg" alt="Облака" width="640" height="480" /></a></p>

<p>Особо состоятельные смотрели прямо с воды. Катеров и всяких лодок было несколько десятков.<br/>
<a href="http://blog.kalcho.ru/wp-content/uploads/2011/09/boats.jpg"><img class="alignnone size-medium wp-image-82" title="Особо состоятельные смотрят с лодок" src="http://blog.kalcho.ru/wp-content/uploads/2011/09/boats-640x480.jpg" alt="Особо состоятельные смотрят с лодок" width="640" height="480" /></a></p>

<p>Еще самолетики.<br/>
<a href="http://blog.kalcho.ru/wp-content/uploads/2011/09/air04.jpg"><img class="alignnone size-medium wp-image-85" title="Самолетики" src="http://blog.kalcho.ru/wp-content/uploads/2011/09/air04-640x480.jpg" alt="Самолетики" width="640" height="480" /></a></p>

<p><a href="http://blog.kalcho.ru/wp-content/uploads/2011/09/air05.jpg"><img class="alignnone size-medium wp-image-86" title="Самолетики" src="http://blog.kalcho.ru/wp-content/uploads/2011/09/air05-640x480.jpg" alt="Самолетики" width="640" height="480" /></a></p>

<p><a href="http://blog.kalcho.ru/wp-content/uploads/2011/09/air06.jpg"><img class="alignnone size-medium wp-image-87" title="Самолетики" src="http://blog.kalcho.ru/wp-content/uploads/2011/09/air06-640x480.jpg" alt="Самолетики" width="640" height="480" /></a></p>

<p><a href="http://blog.kalcho.ru/wp-content/uploads/2011/09/air08.jpg"><img class="alignnone size-medium wp-image-88" title="Самолетики" src="http://blog.kalcho.ru/wp-content/uploads/2011/09/air08-640x480.jpg" alt="Самолетики" width="640" height="480" /></a></p>

<p><a href="http://blog.kalcho.ru/wp-content/uploads/2011/09/air09.jpg"><img class="alignnone size-medium wp-image-89" title="Самолетики" src="http://blog.kalcho.ru/wp-content/uploads/2011/09/air09-640x480.jpg" alt="Самолетики" width="640" height="480" /></a></p>

<p><a href="http://blog.kalcho.ru/wp-content/uploads/2011/09/air10.jpg"><img class="alignnone size-medium wp-image-90" title="Самолетики" src="http://blog.kalcho.ru/wp-content/uploads/2011/09/air10-640x480.jpg" alt="Самолетики" width="640" height="480" /></a></p>

<p><a href="http://blog.kalcho.ru/wp-content/uploads/2011/09/air11.jpg"><img class="alignnone size-medium wp-image-91" title="Самолетики" src="http://blog.kalcho.ru/wp-content/uploads/2011/09/air11-640x480.jpg" alt="Самолетики" width="640" height="480" /></a></p>

<p><a href="http://blog.kalcho.ru/wp-content/uploads/2011/09/air12.jpg"><img class="alignnone size-medium wp-image-92" title="Самолетики" src="http://blog.kalcho.ru/wp-content/uploads/2011/09/air12-640x480.jpg" alt="Самолетики" width="640" height="480" /></a></p>

<p><a href="http://blog.kalcho.ru/wp-content/uploads/2011/09/air13.jpg"><img class="alignnone size-medium wp-image-93" title="Самолетики" src="http://blog.kalcho.ru/wp-content/uploads/2011/09/air13-640x480.jpg" alt="Самолетики" width="640" height="480" /></a></p>

<p>А теперь маленький салют.<br/>
<a href="http://blog.kalcho.ru/wp-content/uploads/2011/09/fireworks.jpg"><img class="alignnone size-medium wp-image-94" title="Салют" src="http://blog.kalcho.ru/wp-content/uploads/2011/09/fireworks-640x480.jpg" alt="Салют" width="640" height="480" /></a></p>

<p>Расходитесь, здесь больше не на что смотреть.<br/>
<a href="http://blog.kalcho.ru/wp-content/uploads/2011/09/go-out.jpg"><img class="alignnone size-medium wp-image-95" title="Расходимся" src="http://blog.kalcho.ru/wp-content/uploads/2011/09/go-out-640x480.jpg" alt="Расходимся" width="640" height="480" /></a></p>

<p>А поднявшись к площади Детей, смотреть уже есть на что. Немного употребивший паренек пытается, что-то напевая, дирижировать случайно попавшимися ему под руку двумя взводами курсантов.<br/>
<a href="http://blog.kalcho.ru/wp-content/uploads/2011/09/soldiers.jpg"><img class="alignnone size-medium wp-image-96" title="Паренек пытается дирижировать курсантами" src="http://blog.kalcho.ru/wp-content/uploads/2011/09/soldiers-640x480.jpg" alt="Паренек пытается дирижировать курсантами" width="640" height="480" /></a></p>

<p>Те ржут и снимают его выступление на мобилы.<br/>
<a href="http://blog.kalcho.ru/wp-content/uploads/2011/09/soldiers2.jpg"><img class="alignnone size-medium wp-image-97" title="Курсанты ржут и снимают пацана на мобилы" src="http://blog.kalcho.ru/wp-content/uploads/2011/09/soldiers2-640x480.jpg" alt="Курсанты ржут и снимают пацана на мобилы" width="640" height="480" /></a></p>

<p>Потом им надоедает, и они его прогоняют. Даже показывают, куда идти надо.<br/>
<a href="http://blog.kalcho.ru/wp-content/uploads/2011/09/soldiers3.jpg"><img class="alignnone size-medium wp-image-98" title="Пацана прогоняют" src="http://blog.kalcho.ru/wp-content/uploads/2011/09/soldiers3-640x480.jpg" alt="Пацана прогоняют" width="640" height="480" /></a></p>

<p>Видео-бонус: самолетики над головой.</p>

<iframe width="425" height="349" src="http://www.youtube.com/embed/Wr-XQ8U080E?hl=en&#038;fs=1" frameborder="0" allowfullscreen></iframe>


<p>Видео-бонус 2: крутящийся самолетик. И я извиняюсь за дрожащие руки.</p>

<iframe width="425" height="349" src="http://www.youtube.com/embed/FBlf20zQ0S8?hl=en&#038;fs=1" frameborder="0" allowfullscreen></iframe>


<p>Фото-бонус: вид с правого берега на жилой комплекс &laquo;Белые Паруса&raquo; на ул. МОПРа.<br/>
<a href="http://blog.kalcho.ru/wp-content/uploads/2011/09/white-sails.jpg"><img class="alignnone size-medium wp-image-103" title="Жилой комплекс &quot;Белые паруса&quot;" src="http://blog.kalcho.ru/wp-content/uploads/2011/09/white-sails-640x480.jpg" alt="Жилой комплекс &quot;Белые паруса&quot;" width="640" height="480" /></a></p>

<p>Фото-бонус 2: вид с правого берега на домик с выемкой на остановке Брусилова.<br/>
<a href="http://blog.kalcho.ru/wp-content/uploads/2011/09/brusilova.jpg"><img class="alignnone size-medium wp-image-102" title="Домик на остановке Брусилова" src="http://blog.kalcho.ru/wp-content/uploads/2011/09/brusilova-640x480.jpg" alt="Домик на остановке Брусилова" width="640" height="480" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Маленькие трюки с последовательностями Oracle]]></title>
    <link href="http://ryabko.github.io/octopress/blog/2011/05/01/malien%27kiie-triuki-s-posliedovatiel%27nostiami-oracle/"/>
    <updated>2011-05-01T00:03:00+04:00</updated>
    <id>http://ryabko.github.io/octopress/blog/2011/05/01/malien&#8217;kiie-triuki-s-posliedovatiel&#8217;nostiami-oracle</id>
    <content type="html"><![CDATA[<p>Это небольшая история о том, как задача, обещавшая быть нудной и монотонной,
после небольших размышлений превратилась в увлекательное занятие.
Конечно, увлекательным его найдет только тот, кому процесс программирования не менее важен,
чем результат, и тот, для кого чем процесс непривычнее и нестандартнее, тем лучше.</p>

<!-- more -->


<h2>Предыстория</h2>

<p>У нас в компании есть одно большое-большое приложение. Оно помогает управлять всеми бизнес-процессами организации. Помогает давно и довольно надежно, поэтому что-то принципиальное менять в нем нежелательно. Приложение написано на <a href="http://ru.wikipedia.org/wiki/Oracle_Forms">Oracle Forms</a>, а это значит, что с базой данных оно связано неразрывно: много логики спрятано в процедурах и функциях базы, триггерах, джобах.</p>

<p>Как известно, для генерации идентификаторов в Oracle обычно используются последовательности &#8211; специальные объекты, которые умеют возвращать очередное число из заданного ряда. Помимо последовательности создается триггер, который срабатывает при вставке новой записи в таблицу. Триггер обращается к последовательности, получает число и вставляет его в поле идентификатора.</p>

<p>В нашем же приложении в некоторых таблицах в качестве идентификатора используется не то же самое число, которое было выдано последовательностью, а немного измененное. После того, как триггер получает из последовательности очередное число, он передает его в нашу специальную функцию <code>GENERATE_ID</code>. Эта функция дописывает в конец переданного числа определенную цифру, которая выбирается в зависимости от некоторых условий. Полученное число используется в качестве идентификатора.</p>

<p>Сейчас уже поздно рассуждать о плюсах и минусах такого подхода. Я не знаю целей, для которых так было сделано. Да и в принципы работы этого приложения я особо не вникал, поскольку разрабатывалось оно без моего участия, а в своей работе я его не использую.</p>

<p>И не вникал бы и дальше, если бы нам не потребовалось сделать еще одно приложение на той же базе. И не просто на той же базе &#8211; а с теми же таблицами и с теми же данными, поскольку новое приложение тоже должно оперировать информацией о наших клиентах, договорах, заказах и т.п. По многим причинам реализовать новое приложение решили на <a href="http://ru.wikipedia.org/wiki/EJB">EJB</a>. Для облегчения доступа к данным в EJB используется технология <a href="http://en.wikipedia.org/wiki/Java_Persistence_API">JPA</a>, позволяющая задать соответствие между классами приложения и таблицами в базе данных. Генерацию идентификаторов JPA также берет на себя, самостоятельно обращаясь к нужным последовательностям, а затем явно передавая полученное число в качестве идентификатора при вставке в таблицу новой записи. Триггер же устроен так, что если при вставке новой записи идентификатор указан явно, то никаких дополнительных действий не делается. И здесь, как и следовало ожидать, возникла&#8230;</p>

<h2>Проблема</h2>

<p>Получилось, что два приложения при генерации идентификатора для одной и той же таблицы используют разные алгоритмы: старое приложение (с помощью триггера) берет число из последовательности и дописывает к нему цифру, а новое (посредством JPA) &#8211; просто берет число из последовательности. Это чревато конфликтами, т.е. генерацией идентификаторов, которые уже есть в таблице, и такие конфликты не заставили себя ждать. Очень скоро новое приложение стало периодически сообщать о том, что не может добавить запись в таблицу из-за нарушения уникальности первичного ключа.</p>

<h2>Быстрое решение</h2>

<p>Новому приложения неважно, как выглядит идентификатор и на какую цифру он заканчивается, а значит использовать функцию <code>GENERATE_ID</code> в нем необязательно. А небольшое исследование старого приложения показало, что цифра, приписываемая этой функцией к идентификатору, никогда не может быть нулем. Исходя из этого, в качестве решения проблемы было принято следующее: сделать так, чтобы последовательности, которых касается эта проблема, всегда выдавали значения, заканчивающиеся на ноль. Тогда в новом приложении идентификаторы будут всегда заканчиваться на ноль, а в старом &#8211; на какую-нибудь другую, приписываемую, цифру.</p>

<p>Сделать так, чтобы выдаваемое последовательностью значение всегда заканчивалось на ноль, несложно. Сначала нужно несколько раз выбрать из последовательности значение таким запросом:</p>

<pre><code>`select название_последовательности.nextval from dual`
</code></pre>

<p>Выполнять этот запрос нужно до тех пор, пока не будет получено число, заканчивающееся на ноль. Затем нужно задать шаг последовательности равным 10.</p>

<pre><code>`alter sequence название_последовательности increment by 10`
</code></pre>

<p>Описанные действия были проделаны над всеми последовательностями, работа с которыми приводила к ошибкам. Ошибки сначала исчезли, но, как оказалось, не навсегда. Дело в том, что последовательностей, потенциально подверженных этим проблемам, оказалось довольно много, и исправлена была только часть из них. Найти же их все оказалось не так-то просто. Сначала действовали опытным путем. Как только замечали ошибку, связанную с какой-либо последовательностью, эту последовательность тут же исправляли описанным выше способом. Со временем таких найденных и исправленных последовательностей становилось все больше, а ошибки появлялись все реже.</p>

<p>Пришел декабрь &#8211; время демонстрации нового приложения руководству. Конфликты в последовательностях уже давно не давали о себе знать, но не было никакой уверенности в том, что не осталось последовательностей, которые в самый неподходящий момент могут выдать уже существующее в таблице значение.</p>

<p>Работы по новому проекту, запланированные на 2010 год, были в основном завершены; в воздухе витал дух приближающегося нового года &#8211; в общем, самое время заняться чем-нибудь очень интересным, а заодно и окончательно разобраться с этими последовательностями.</p>

<h2>Ненормальное программирование</h2>

<p>Я решил найти абсолютно все последовательности, которые могли бы нам когда-нибудь доставить описанные выше проблемы. При этом хотелось, чтобы, во-первых, эти последовательности были найдены если не в автоматическом, то хотя бы в полуавтоматическом режиме, а во-вторых, чтобы я при этом узнал для себя что-нибудь новое, полезное и интересное.</p>

<h3>Поиск последовательностей в базе</h3>

<p>Как было описано ранее, в старом приложении используется функция <code>GENERATE_ID</code>, вызываемая из триггера и дописывающая к сгенерированному последовательностью числу какую-нибудь цифру. Значит, чтобы выбрать те последовательности, которые представляют опасность для нового проекта, нужно найти все последовательности, которые используются в тех же триггерах, в которых используется функция <code>GENERATE_ID</code>.</p>

<p>Вместо того, чтобы просматривать исходники всех триггеров, я решил обойтись одним запросом. В Oracle есть множество специальных представлений, из которых можно получить различную служебную информацию. Сначала я рассчитывал найти представление, из которого можно получить исходные коды триггеров, и с помощью оператора <code>LIKE</code> найти триггеры, использующие функцию <code>GENERATE_ID</code>. Но конечной моей целью был все-таки список последовательностей, а не список триггеров, и я нашел еще более подходящее мне представление &#8211; <code>ALL_DEPENDENCIES</code>. Это представление содержит информацию обо всех зависимостях между объектами базы данных. Основными полями этого представления являются следующие:</p>

<ul>
<li><code>NAME</code> &#8211; название использующего объекта</li>
<li><code>TYPE</code> &#8211; тип использующего объекта</li>
<li><code>REFERENCED_NAME</code> &#8211; название используемого объекта</li>
<li><code>REFERENCED_TYPE</code> &#8211; тип используемого объекта</li>
</ul>


<p>Нужные нам последовательности можно получить с помощью такого запроса:</p>

<pre><code>`select referenced_name from all_dependencies
where name in (
    select name from all_dependencies
    where referenced_name = 'GENERATE_ID' and type = 'TRIGGER'
) and referenced_type = 'SEQUENCE'`
</code></pre>

<p>Подзапрос выбирает названия всех объектов, являющихся триггерами, которые используют функцию <code>GENERATE_ID</code>. Основной запрос выбирает названия всех объектов, являющихся последовательностями и использующихся в триггерах, названия которых выбраны подзапросом.</p>

<p>Этот запрос вернул мне около 100 последовательностей. Изменять их все не было надобности, т.к. большинство из них в новом проекте не используются. Значит следующим шагом должно стать нахождение последовательностей, использующихся в новом проекте.</p>

<h3>Поиск последовательностей в проекте</h3>

<p>Названия использующихся последовательностей можно найти в исходном коде проекта. На компьютере установлен Linux, а значит для поиска можно задействовать всю мощь командной строки.</p>

<p>Если в какую-то таблицу базы данных возможна вставка записей из приложения, то для класса, соответствующего этой таблице, с помощью специальной аннотации указывается последовательность, из которой нужно брать значения для новых идентификаторов. Например:</p>

<pre><code>`@SequenceGenerator(name=”CLIENT_SEQ”, sequenceName=”КЛИЕНТЫ_SEQ”)
public class Client {
    ...
}`
</code></pre>

<p>Такая запись означает, что при сохранении в базу нового клиента для него будет использоваться идентификатор, полученный из последовательности <code>КЛИЕНТЫ_SEQ</code>.</p>

<p>Значит, чтобы найти все последовательности, использующиеся в проекте, нужно в файлах исходных кодов найти все подстроки, заключенные в кавычки и идущие после подстроки seqeunceName. Сделать это можно несколькими командами, последовательно передавая выходные данные одной команды на вход другой с помощью символа «|».</p>

<p>Для поиска всех файлов с исходными кодами можно воспользоваться командой find:</p>

<pre><code>`find ~/project/src -name ‘*.java’`
</code></pre>

<p>Эта команда выведет список всех файлов с расширением java из каталога ~/project/src.</p>

<p>Теперь нужно просмотреть содержимое всех файлов. В проекте используется кодировка cp1251, а на консоль у меня нормально выводится только содержимое файлов в кодировке utf8. На лету перекодировать файл при выводе на консоль можно с помощью команды iconv:</p>

<pre><code>`find ~/project/src -name ‘*.java’ | xargs iconv -f cp1251 -t utf8`
</code></pre>

<p>Команда <code>xargs</code> здесь указывает команде <code>iconv</code>, что та в качестве своих аргументов должна использовать результаты работы команды <code>find</code>, т.е. список найденных файлов. А с помощью опций <code>f</code> и <code>t</code> задаются входная и выходная кодировки. Результатом работы этих команд станет вывод на консоль содержимого всех файлов с расширением java из каталога ~/project/src.</p>

<p>Нас интересуют только строки, содержащие <code>sequenceName</code>. Отобрать их можно с помощью известной команды <code>grep</code>, дописав ее в конец описанной ранее последовательности команд:</p>

<pre><code>`… | grep sequenceName`
</code></pre>

<p>Теперь из полученных строк нужно извлечь названия последовательностей. Первой попавшейся мне на глаза утилитой для работы с регулярными выражениями, оказалась утилита <code>sed</code>. В частности эта утилита умеет заменять подстроку, соответствующую заданному регулярному выражению на другую строку. Вместо придумывания одного сложного регулярного выражения гораздо быстрей оказалось написать несколько простых, применяя их по очереди:</p>

<pre><code>`… | sed "s/\(.*sequenceName\)//" | sed "s/\([^\"]*\"\)//" 
| sed "s/\(\".*\)//"`
</code></pre>

<p>Оператор <code>s///</code> утилиты <code>sed</code> как раз и выполняет нужную нам замену. Между первым и вторым слешем этого оператора задается регулярное выражение, а между вторым и третим &#8211; строка для замены.</p>

<p>В нашем случае сначала строка от начала и до seqenceName включительно заменяется на пустую строку, т.е. обрезается. Затем в оставшейся строке обрезается ее часть от начала и до первой кавычки включительно. И третьим вызовом обрезается часть строки от оставшейся кавычки и до конца. После таких манипуляций от строки остается только название последовательности.</p>

<p>Итак, полная команда, выводящая на консоль список всех последовательностей приложения, выглядит следующим образом:</p>

<pre><code>`find ~/project/src -name ‘*.java’ | xargs iconv -f cp1251 -t utf8
| grep sequenceName | sed "s/\(.*sequenceName\)//"
| sed "s/\([^\"]*\"\)//" | sed "s/\(\".*\)//"`
</code></pre>

<p>В результате работы этой команды получен список примерно 60 последовательностей, использующихся в приложении.</p>

<h3>Финальный аккорд</h3>

<p>Теперь осталось только найти пересечение списка последовательностей, полученных из базы, со списком, полученным из приложения. Для этого я решил сформировать конструкцию <code>IN</code> из полученных в консоли названий последовательностей и дописать эту конструкцию в запрос к базе.</p>

<p>В SQL аргументом конструкции <code>IN</code>, как известно, является перечисление через запятую всех возможных значений, разделяемых запятыми. Строковые значения при этом должны быть взяты в апострофы. Для того, чтобы сформировать такую конструкцию из наших последовательностей, нужно к описанной выше цепочке команд для поиска последовательностей по проекту, добавить еще одну &#8211; форматирующую вывод в нужном нам виде:</p>

<pre><code>`… | sed "s/.*/'\0',/"`
</code></pre>

<p>Эта команда перед выводом названия последовательности на консоль обрамляет его апострофами, а в конце добавляет запятую. Получим примерно следующее:</p>

<pre><code>`‘КЛИЕНТЫ_SEQ’,
‘ЗАКАЗЫ_SEQ’,
‘ДОГОВОРЫ_SEQ’,
…`
</code></pre>

<p>Для того, чтобы использовать эти строки в запросе в операторе <code>IN</code>, нужно лишь поставить открывающуюся скобку перед первой строкой, закрывающуюся &#8211; после последней, а также стереть последнюю запятую. В итоге получим такой запрос:</p>

<pre><code>`select referenced_name from all_dependencies
where name in (
    select name from all_dependencies
    where referenced_name = 'GENERATE_ID' and type = 'TRIGGER'
) and referenced_type = 'SEQUENCE'
and referenced_name in (‘КЛИЕНТЫ_SEQ’, ‘ЗАКАЗЫ_SEQ’, … , ‘ДОГОВОРЫ_SEQ’)`
</code></pre>

<p>Все последовательности, полученные с помощью такого запроса, изменяем по уже описанной методике таким образом, чтобы они возвращали значение, оканчивающееся на ноль, и надеемся, что они нам больше никогда проблем не доставят.</p>

<h2>Итоги</h2>

<p>Возможно, проблемы с самого начала можно было избежать. Возможно, решить проблему можно было более простым способом. Возможно, проблема себя не изжила и когда-нибудь еще проявится. Но на данный момент задача решена, а я, решая ее, очень интересно провел несколько часов своей жизни.</p>

<h2>Ссылки</h2>

<ul>
<li><a href="http://download.oracle.com/docs/cd/B19306_01/server.102/b14237/toc.htm">http://download.oracle.com/docs/cd/B19306_01/server.102/b14237/toc.htm</a> &#8211; Oracle® Database Reference 10g Release 2 (10.2) &#8211; документ, в котором можно найти описание всех служебных представлений Oracle.</li>
</ul>

]]></content>
  </entry>
  
</feed>
